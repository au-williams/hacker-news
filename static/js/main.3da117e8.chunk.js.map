{"version":3,"sources":["assets/github-brands.svg","models/HistoryRecord.js","assets/info-circle-solid.svg","constants/ResultsRoute.js","constants/SearchSortBy.js","components/Results.js","assets/times-circle-solid.svg","components/App.js","index.js"],"names":["HistoryRecord","searchTerm","searchSortBy","this","searchDate","Date","Results","props","content","isLoading","isReadOnly","onSearchClick","onSearchKeyDown","onSearchSortByChange","onSearchTermChange","pageRoute","className","id","disabled","onChange","onKeyDown","onClick","defaultChecked","type","length","map","record","index","ResultsRoute","pointString","points","commentString","num_comments","href","objectID","title","GetSearchElement","dateString","toLocaleString","sortString","SearchSortBy","getTime","GetHistoryElement","App","state","searchHistory","searchResults","showInfo","handleKeyDown","e","key","handleSearch","trim","setState","input","fetch","then","res","json","result","hits","catch","error","console","handleSearchSortByChange","target","checked","handleSearchTermChange","value","src","InfoCircleIcon","alt","TimesCircleIcon","GitHubBrandsIcon","to","path","from","Component","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.3da117e8.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/github-brands.e2f07326.svg\";","export default class HistoryRecord {\r\n    constructor(searchTerm, searchSortBy) {\r\n        this.searchDate = new Date();\r\n        this.searchTerm = searchTerm;\r\n        this.searchSortBy = searchSortBy;\r\n    }\r\n}","export default __webpack_public_path__ + \"static/media/info-circle-solid.92d3ccd5.svg\";","// pulling in route information from the browser is\r\n// inconsistent because of differences in localhost\r\n// and GitHub pages hash routing ... Use enum value\r\n// to simplify the process in our Results component\r\n\r\nexport default {\r\n    SEARCH: \"search\",\r\n    HISTORY: \"history\"\r\n};\r\n","// see: https://hn.algolia.com/api\r\nexport default {\r\n    DATE: \"search_by_date\",\r\n    RELEVANCE: \"search\"\r\n};\r\n","import \"./App.css\";\r\nimport React from \"react\";\r\nimport ResultsRoute from \"../constants/ResultsRoute\";\r\nimport SearchSortBy from \"../constants/SearchSortBy\";\r\n\r\n// build elements based on the HistoryRecord model\r\nconst GetHistoryElement = (record, index) => {\r\n  const dateString = record.searchDate.toLocaleString();\r\n  const sortString = record.searchSortBy === SearchSortBy.RELEVANCE ? \"relevance\" : \"date\";\r\n\r\n  return (\r\n    <div key={record.searchDate.getTime()}>\r\n      <div>{index + 1}.</div>\r\n      <div>\r\n        <div className=\"result-head\">{record.searchTerm}</div>\r\n        <div className=\"result-desc\">{`${dateString} | Sorted by ${sortString}`}</div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\n// build elements based on the HackerNews API object\r\nconst GetSearchElement = (record, index) => {\r\n  const pointString = `${record.points} point${record.points === 1 ? \"\" : \"s\"}`;\r\n  const commentString = `${record.num_comments} comment${record.num_comments === 1 ? \"\" : \"s\"}`;\r\n\r\n  return (\r\n    <a key={record.objectID} href={`https://news.ycombinator.com/item?id=${record.objectID}`}>\r\n      <div>{index + 1}.</div>\r\n      <div>\r\n        <div className=\"result-head\">{record.title}</div>\r\n        <div className=\"result-desc\">{`${pointString} | ${commentString}`}</div>\r\n      </div>\r\n    </a>\r\n  );\r\n};\r\n\r\nexport default function Results(props) {\r\n  const {\r\n    content,\r\n    isLoading,\r\n    isReadOnly,\r\n    onSearchClick,\r\n    onSearchKeyDown,\r\n    onSearchSortByChange,\r\n    onSearchTermChange,\r\n    pageRoute,\r\n  } = props;\r\n\r\n  const GetResultElement = () => {\r\n    if (isLoading)\r\n      return <div>Fetching API results ...</div>;\r\n    else if (!content || !content.length)\r\n      return <div>No {pageRoute} results!</div>;\r\n    else\r\n      return content.map((record, index) =>\r\n        pageRoute === ResultsRoute.SEARCH\r\n          ? GetSearchElement(record, index)\r\n          : GetHistoryElement(record, index)\r\n      );\r\n  };\r\n\r\n  return (\r\n    <div className=\"content\">\r\n      <div id=\"search-bar\">\r\n        <label>Search</label>\r\n        <input\r\n          disabled={isReadOnly}\r\n          onChange={onSearchTermChange}\r\n          onKeyDown={onSearchKeyDown}\r\n        />\r\n        <button\r\n          disabled={isReadOnly}\r\n          onClick={onSearchClick}>\r\n          â†’\r\n        </button>\r\n        <label>\r\n          <input\r\n            defaultChecked=\"true\"\r\n            disabled={isReadOnly}\r\n            onChange={onSearchSortByChange}\r\n            type=\"checkbox\"\r\n          />\r\n          Sort by relevance\r\n        </label>\r\n      </div>\r\n      <div id=\"search-results\">{GetResultElement()}</div>\r\n    </div>\r\n  );\r\n}\r\n","export default __webpack_public_path__ + \"static/media/times-circle-solid.13560fb8.svg\";","import \"./App.css\";\r\nimport GitHubBrandsIcon from \"../assets/github-brands.svg\";\r\nimport HistoryRecord from \"../models/HistoryRecord\";\r\nimport InfoCircleIcon from \"../assets/info-circle-solid.svg\";\r\nimport React, { Component } from \"react\";\r\nimport Results from \"./Results\";\r\nimport ResultsRoute from \"../constants/ResultsRoute\";\r\nimport SearchSortBy from \"../constants/SearchSortBy\";\r\nimport TimesCircleIcon from \"../assets/times-circle-solid.svg\";\r\nimport { HashRouter, Switch, Route, Link, Redirect, } from \"react-router-dom\";\r\n\r\nclass App extends Component {\r\n  state = {\r\n    isLoading: false,\r\n    searchHistory: [],\r\n    searchResults: [],\r\n    searchSortBy: SearchSortBy.RELEVANCE,\r\n    searchTerm: \"\",\r\n    showInfo: true,\r\n  };\r\n\r\n  handleKeyDown = (e) => {\r\n    if (e.key !== \"Enter\") return;\r\n    this.handleSearch();\r\n  };\r\n\r\n  handleSearch = () => {\r\n    const isNullOrWhiteSpace =\r\n      !this.state.searchTerm || !this.state.searchTerm.trim();\r\n\r\n    if (isNullOrWhiteSpace) {\r\n      // don't send empty data into the api\r\n      this.setState({ searchResults: [] });\r\n      return;\r\n    }\r\n\r\n    this.setState({\r\n      isLoading: true,\r\n      searchHistory: [\r\n        ...this.state.searchHistory,\r\n        new HistoryRecord(this.state.searchTerm, this.state.searchSortBy)\r\n      ]\r\n    });\r\n\r\n    const input = `https://hn.algolia.com/api/v1/${this.state.searchSortBy}?tags=story&query=${this.state.searchTerm}`;\r\n\r\n    fetch(input)\r\n      .then((res) => res.json())\r\n      .then((result) => {\r\n        this.setState({\r\n          isLoading: false,\r\n          searchResults: result.hits\r\n        });\r\n      })\r\n      .catch((error) => {\r\n        // todo <aw>: this should have an actual error message on screen\r\n        console.error(\"Error:\", error);\r\n        this.setState({\r\n          isLoading: false,\r\n          searchResults: []\r\n        });\r\n      });\r\n  };\r\n\r\n  handleSearchSortByChange = (e) => {\r\n    this.setState({\r\n      searchSortBy: e.target.checked\r\n        ? SearchSortBy.RELEVANCE\r\n        : SearchSortBy.DATE,\r\n    });\r\n  };\r\n\r\n  handleSearchTermChange = (e) => {\r\n    this.setState({ searchTerm: e.target.value });\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <HashRouter>\r\n        {this.state.showInfo && (\r\n          <div className=\"panel\">\r\n            <div className=\"header\">\r\n              <img src={InfoCircleIcon} alt=\"Info circle icon\"/>\r\n              <strong>Information</strong>\r\n              <button onClick={() => this.setState({showInfo: false})}>\r\n                <img src={TimesCircleIcon} alt=\"Close icon\" className=\"close\"/>\r\n              </button>\r\n            </div>\r\n            <div className=\"content\">\r\n              Hello! ðŸ‘‹ This web app is a small demo built with React JS and the <a href=\"https://hn.algolia.com/api\">Hacker News Algolia API</a>. All code was written by me with styles inspired by the actual website. I'm not affiliated with Hacker News, nor did I use any of their source code. This project is available on <a href=\"https://github.com/au-williams/hacker-news\">GitHub</a> along with its requirements. SVG icons are free to use with attribution to the free <a href=\"https://fontawesome.com/license\">FontAwesome license</a>. Thanks!\r\n            </div>\r\n          </div>\r\n        )}\r\n        <div className=\"panel\">\r\n          <nav className=\"header\">\r\n            <a href=\"https://github.com/au-williams/hacker-news\">\r\n              <img src={GitHubBrandsIcon} alt=\"GitHub icon\"/>\r\n            </a>\r\n            <strong>Hacker News </strong>\r\n            <span>Search Demo</span>\r\n            <ul>\r\n              [\r\n              <li>\r\n                <Link to=\"/search\">search</Link>\r\n              </li>\r\n              |\r\n              <li>\r\n                <Link to=\"/history\">history</Link>\r\n              </li>\r\n              ]\r\n            </ul>\r\n            <span>\r\n              {/* wrap in span to collapse together */}\r\n              <strong>Made by: </strong>\r\n              <a href=\"https://www.linkedin.com/in/auwilliams/\">Austin Williams</a>\r\n            </span>\r\n          </nav>\r\n          {/*\r\n            The application architecture was designed to utilize the same results view\r\n            to support future enhancements ... Such as searching through history items.\r\n            For now make the history inputs read-only until that work has been defined.\r\n          */}\r\n          <Switch>\r\n            <Route path=\"/search\">\r\n              <Results\r\n                content={this.state.searchResults}\r\n                isLoading={this.state.isLoading}\r\n                isReadOnly={false}\r\n                onSearchClick={this.handleSearch}\r\n                onSearchKeyDown={this.handleKeyDown}\r\n                onSearchSortByChange={this.handleSearchSortByChange}\r\n                onSearchTermChange={this.handleSearchTermChange}\r\n                pageRoute={ResultsRoute.SEARCH}\r\n              />\r\n            </Route>\r\n            <Route path=\"/history\">\r\n              <Results\r\n                content={this.state.searchHistory}\r\n                isReadOnly={true}\r\n                pageRoute={ResultsRoute.HISTORY}/>\r\n            </Route>\r\n            <Redirect from=\"/\" to=\"/search\" />\r\n          </Switch>\r\n        </div>\r\n      </HashRouter>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './components/App';\r\nimport './index.css';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n"],"sourceRoot":""}