{"version":3,"sources":["constants/ResultsRoute.js","constants/SearchSortBy.js","components/Results.js","models/HistoryRecord.js","assets/github-brands.svg","assets/info-circle-solid.svg","assets/times-circle-solid.svg","components/App.js","index.js"],"names":["Results","element","this","props","isLoading","content","length","map","record","key","pageRoute","ResultsRoute","pointString","points","commentString","num_comments","href","objectID","className","title","GetSearchElement","dateString","searchDate","toLocaleString","sortString","searchSortBy","SearchSortBy","searchTerm","GetHistoryElement","id","disabled","isReadOnly","onChange","onSearchTermChange","onKeyDown","onSearchKeyDown","onClick","onSearchClick","defaultChecked","onSearchSortByChange","type","Component","HistoryRecord","Date","App","state","hidePanel","searchHistory","searchResults","handleKeyDown","e","handleSearch","trim","setState","input","fetch","then","res","json","result","hits","catch","error","console","handleSearchSortByChange","target","checked","handleSearchTermChange","value","src","InfoCircleIcon","alt","TimesCircleIcon","GitHubBrandsIcon","to","path","from","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.a6c91c8b.chunk.js","sourcesContent":["// pulling in route information from the browser is\r\n// inconsistent because of differences in localhost\r\n// and GitHub pages hash routing ... Use enum value\r\n// to simplify the process in our Results component\r\n\r\nexport default {\r\n    SEARCH: \"search\",\r\n    HISTORY: \"history\"\r\n};\r\n","// see: https://hn.algolia.com/api\r\nexport default {\r\n    DATE: \"search_by_date\",\r\n    RELEVANCE: \"search\"\r\n};\r\n","import \"./App.css\";\r\nimport React, { Component } from \"react\";\r\nimport ResultsRoute from \"../constants/ResultsRoute\";\r\nimport SearchSortBy from \"../constants/SearchSortBy\";\r\n\r\n// build elements based on the HistoryRecord data model\r\nconst GetHistoryElement = (record, key) => {\r\n  const dateString = record.searchDate.toLocaleString();\r\n  const sortString = record.searchSortBy === SearchSortBy.RELEVANCE ? \"relevance\" : \"date\";\r\n\r\n  return (\r\n    <div>\r\n      <div>{key + 1}.</div>\r\n      <div>\r\n        <div className=\"result-head\">{record.searchTerm}</div>\r\n        <div className=\"result-desc\">{`${dateString} | Sorted by ${sortString}`}</div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\n// build elements based on the HackerNews API object\r\nconst GetSearchElement = (record, key) => {\r\n  const pointString = `${record.points} point${record.points === 1 ? \"\" : \"s\"}`;\r\n  const commentString = `${record.num_comments} comment${record.num_comments === 1 ? \"\" : \"s\"}`;\r\n\r\n  return (\r\n    <a href={`https://news.ycombinator.com/item?id=${record.objectID}`}>\r\n      <div>{key + 1}.</div>\r\n      <div>\r\n        <div className=\"result-head\">{record.title}</div>\r\n        <div className=\"result-desc\">{`${pointString} | ${commentString}`}</div>\r\n      </div>\r\n    </a>\r\n  );\r\n};\r\n\r\nclass Results extends Component {\r\n  render() {\r\n    let element = null;\r\n\r\n    if (this.props.isLoading) {\r\n      element = <div>Fetching API results ...</div>;\r\n    } else if (!this.props.content || !this.props.content.length) {\r\n      element = <div>No {this.props.pageRoute} results!</div>;\r\n    } else {\r\n      element = this.props.content.map((record, key) =>\r\n        this.props.pageRoute === ResultsRoute.SEARCH\r\n          ? GetSearchElement(record, key)\r\n          : GetHistoryElement(record, key)\r\n      );\r\n    }\r\n\r\n    return (\r\n      <div className=\"content\">\r\n        <div id=\"search-bar\">\r\n          <label>Search</label>\r\n          <input\r\n            disabled={this.props.isReadOnly}\r\n            onChange={this.props.onSearchTermChange}\r\n            onKeyDown={this.props.onSearchKeyDown}\r\n          />\r\n          <button\r\n            disabled={this.props.isReadOnly}\r\n            onClick={this.props.onSearchClick}\r\n          >\r\n            â†’\r\n          </button>\r\n          <label>\r\n            <input\r\n              defaultChecked=\"true\"\r\n              disabled={this.props.isReadOnly}\r\n              onChange={this.props.onSearchSortByChange}\r\n              type=\"checkbox\"\r\n            />\r\n            Sort by relevance\r\n          </label>\r\n        </div>\r\n        <div id=\"search-results\">{element}</div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Results;\r\n","export default class HistoryRecord {\r\n    constructor(searchTerm, searchSortBy) {\r\n        this.searchDate = new Date();\r\n        this.searchTerm = searchTerm;\r\n        this.searchSortBy = searchSortBy;\r\n    }\r\n}","export default __webpack_public_path__ + \"static/media/github-brands.e2f07326.svg\";","export default __webpack_public_path__ + \"static/media/info-circle-solid.92d3ccd5.svg\";","export default __webpack_public_path__ + \"static/media/times-circle-solid.13560fb8.svg\";","import \"./App.css\";\r\nimport React, { Component } from \"react\";\r\nimport Results from \"./Results\";\r\nimport ResultsRoute from \"../constants/ResultsRoute\";\r\nimport SearchSortBy from \"../constants/SearchSortBy\";\r\nimport HistoryRecord from \"../models/HistoryRecord\";\r\nimport GitHubBrandsIcon from \"../assets/github-brands.svg\";\r\nimport InfoCircleIcon from \"../assets/info-circle-solid.svg\";\r\nimport TimesCircleIcon from \"../assets/times-circle-solid.svg\";\r\nimport { HashRouter, Switch, Route, Link, Redirect, } from \"react-router-dom\";\r\n\r\nclass App extends Component {\r\n  state = {\r\n    hidePanel: false,\r\n    isLoading: false,\r\n    searchHistory: [],\r\n    searchResults: [],\r\n    searchSortBy: SearchSortBy.RELEVANCE,\r\n    searchTerm: \"\",\r\n  };\r\n\r\n  handleKeyDown = (e) => {\r\n    if (e.key !== \"Enter\") return;\r\n    this.handleSearch();\r\n  };\r\n\r\n  handleSearch = () => {\r\n    const isNullOrWhiteSpace =\r\n      !this.state.searchTerm || !this.state.searchTerm.trim();\r\n\r\n    if (isNullOrWhiteSpace) {\r\n      // don't send empty data into the api\r\n      this.setState({ searchResults: [] });\r\n      return;\r\n    }\r\n\r\n    this.setState({\r\n      isLoading: true,\r\n      searchHistory: [\r\n        ...this.state.searchHistory,\r\n        new HistoryRecord(this.state.searchTerm, this.state.searchSortBy),\r\n      ],\r\n    });\r\n\r\n    const input = `https://hn.algolia.com/api/v1/${this.state.searchSortBy}?tags=story&query=${this.state.searchTerm}`;\r\n\r\n    fetch(input)\r\n      .then((res) => res.json())\r\n      .then((result) => {\r\n        this.setState({\r\n          isLoading: false,\r\n          searchResults: result.hits\r\n        });\r\n      })\r\n      .catch((error) => {\r\n        // todo <aw>: this should have an actual error message on screen\r\n        console.error(\"Error:\", error);\r\n        this.setState({\r\n          isLoading: false,\r\n          searchResults: []\r\n        });\r\n      });\r\n  };\r\n\r\n  handleSearchSortByChange = (e) => {\r\n    this.setState({\r\n      searchSortBy: e.target.checked\r\n        ? SearchSortBy.RELEVANCE\r\n        : SearchSortBy.DATE,\r\n    });\r\n  };\r\n\r\n  handleSearchTermChange = (e) => {\r\n    this.setState({ searchTerm: e.target.value });\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <HashRouter>\r\n        {!this.state.hidePanel && (\r\n          <div className=\"panel\">\r\n            <div className=\"header\">\r\n              <img src={InfoCircleIcon} alt=\"Info circle icon\"/>\r\n              <strong>Information</strong>\r\n              <button onClick={() => this.setState({hidePanel: true})}>\r\n                <img src={TimesCircleIcon} alt=\"Close icon\" className=\"close\"/>\r\n              </button>\r\n            </div>\r\n            <div className=\"content\">\r\n              Hello! ðŸ‘‹ This web app is a small demo built with React JS and the <a href=\"https://hn.algolia.com/api\">Hacker News Algolia API</a>. All code was written by me with styles inspired by the actual website. I'm not affiliated with Hacker News, nor did I use any of their source code. This project is available on <a href=\"https://github.com/au-williams/hacker-news\">GitHub</a> along with its requirements. SVG icons are free to use with attribution to the free <a href=\"https://fontawesome.com/license\">FontAwesome license</a>. Thanks!\r\n            </div>\r\n          </div>\r\n        )}\r\n        <div className=\"panel\">\r\n          <nav className=\"header\">\r\n            <a href=\"https://github.com/au-williams/hacker-news\">\r\n              <img src={GitHubBrandsIcon} alt=\"GitHub icon\"/>\r\n            </a>\r\n            <strong>Hacker News </strong>\r\n            <span>Search Demo</span>\r\n            <ul>\r\n              [\r\n              <li>\r\n                <Link to=\"/search\">search</Link>\r\n              </li>\r\n              |\r\n              <li>\r\n                <Link to=\"/history\">history</Link>\r\n              </li>\r\n              ]\r\n            </ul>\r\n            <span>\r\n              {/* wrap in span to collapse together */}\r\n              <strong>Made by: </strong>\r\n              <a href=\"https://www.linkedin.com/in/auwilliams/\">Austin Williams</a>\r\n            </span>\r\n          </nav>\r\n          {/*\r\n            The application architecture was designed to utilize the same results view\r\n            to support future enhancements ... Such as searching through history items.\r\n            For now make the history inputs read-only until that work has been defined.\r\n          */}\r\n          <Switch>\r\n            <Route path=\"/search\">\r\n              <Results\r\n                content={this.state.searchResults}\r\n                isLoading={this.state.isLoading}\r\n                isReadOnly={false}\r\n                onSearchClick={this.handleSearch}\r\n                onSearchKeyDown={this.handleKeyDown}\r\n                onSearchSortByChange={this.handleSearchSortByChange}\r\n                onSearchTermChange={this.handleSearchTermChange}\r\n                pageRoute={ResultsRoute.SEARCH}\r\n              />\r\n            </Route>\r\n            <Route path=\"/history\">\r\n              <Results\r\n                content={this.state.searchHistory}\r\n                isReadOnly={true}\r\n                pageRoute={ResultsRoute.HISTORY}/>\r\n            </Route>\r\n            <Redirect from=\"/\" to=\"/search\" />\r\n          </Switch>\r\n        </div>\r\n      </HashRouter>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './components/App';\r\nimport './index.css';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n"],"sourceRoot":""}